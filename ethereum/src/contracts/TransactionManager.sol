// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

contract TransactionManager {
    struct Transaction {
        string id; // transaction id generated by firebase
        string recordId; // id of the created/updated/deleted record
        string operation; // create || update || delete
        string performedBy; // clinic member username
        string description;
        uint256 timeStamp; 
    }

    Transaction[] public transactions;
    string public clinicId; // clinic id generated by firebase
    string public clinicName; // name of the clinic
    address public clinicAdmin; // address of the user who deployed the contract
    mapping(address => bool) public allowedTransactionCreators;
    mapping(address => bool) public allowedTransactionViewers;
    
    constructor(string memory _clinicName, string memory _clinicId) {
        clinicName = _clinicName;
        clinicId = _clinicId;
        clinicAdmin = msg.sender;
        allowedTransactionCreators[msg.sender] = true;
        allowedTransactionViewers[msg.sender] = true; 
    }
    
    modifier onlyAdmin(){
        require(msg.sender == clinicAdmin);
        _;
    }

    modifier onlyAllowedCreators() {
        require(allowedTransactionCreators[msg.sender]);
        _;
    }

    modifier onlyAllowedViewers() {
        require(allowedTransactionViewers[msg.sender]);
        _;
    }

    modifier validOperation(string memory _operation) {
        require(
            keccak256(abi.encodePacked(_operation)) == keccak256(abi.encodePacked("CREATE")) ||
            keccak256(abi.encodePacked(_operation)) == keccak256(abi.encodePacked("UPDATE")) ||
            keccak256(abi.encodePacked(_operation)) == keccak256(abi.encodePacked("DELETE"))
        );
        _;
    }

    function createTransaction(string memory _id, string memory _recordId, string memory _operation, string memory _performedBy, string memory _description) 
        public onlyAllowedCreators validOperation(_operation) {
            Transaction memory newTransaction;
            newTransaction.id = _id;
            newTransaction.recordId = _recordId;
            newTransaction.operation = _operation;
            newTransaction.performedBy = _performedBy;
            newTransaction.timeStamp = block.timestamp;
            newTransaction.description = _description;
            transactions.push(newTransaction);
    }
    
    function getTransactionCount() public onlyAllowedViewers view returns(uint256) {
        return transactions.length;
    }
    
    function addAllowedTransactionCreator(address _address) public onlyAdmin {
        allowedTransactionCreators[_address] = true;
    }
    
    function removeAllowedTransactionCreator(address _address) public onlyAdmin {
        allowedTransactionCreators[_address] = false;
    }

    function addAllowedTransactionViewer(address _address) public onlyAdmin {
        allowedTransactionViewers[_address] = true;
    }
    
    function removeAllowedTransactionViewer(address _address) public onlyAdmin {
        allowedTransactionViewers[_address] = false;
    }
}
